class Solution {
  public:
    // Helper function to merge two sorted bottom-linked lists
    Node* merge(Node* a, Node* b) {
        if (!a) return b;
        if (!b) return a;
        
        Node* result;
        if (a->data < b->data) {
            result = a;
            result->bottom = merge(a->bottom, b);
        } else {
            result = b;
            result->bottom = merge(a, b->bottom);
        }
        result->next = NULL;  // ensure 'next' is NULL in flattened list
        return result;
    }
    
    Node* flatten(Node* root) {
        // Base case
        if (!root || !root->next) 
            return root;
        
        // Flatten the list on right
        root->next = flatten(root->next);
        
        // Merge current list with flattened next
        root = merge(root, root->next);
        
        return root;
    }
};
